Stack Configurations
====================


Config File Structure
---------------------
The configuration file is a `YAML <http://www.yaml.org>`_ document.
Like an Ansible playbook, the outermost data structure is a `YAML
mapping <http://www.yaml.org/spec/1.2/spec.html#id2798057>`_.

Like Python, blocks/sections/stanzas in a Bang config file are
visually defined by indentation level.  Each top-level section name
is a key in the outermost mapping structure.

There are some reserved `Top-Level Keys`_ that have special meaning
in Bang and there is an implicit, broader grouping of these top-level
keys/sections.  The broader groups are:

    - `General Stack Properties`_
    - `Dynamic Stack Resources`_
    - `Configuration Scopes`_

Any string that is a valid YAML identifier and is **not** a reserved
top-level key is available for use as a *custom configuration scope*.
It is up to the user to avoid name collisions between keys,
especially between reserved keys and custom configuration scope keys.


Top-Level Keys
--------------
General Stack Properties
~~~~~~~~~~~~~~~~~~~~~~~~
The attributes in this section apply to the entire stack.

The following top-level section names are reserved:

name
    This is the unique stack name.  E.g. ``myblog-prod``,
    ``myblog-staging``, ``monitoring``, etc...

version
    The overall stack version.  A stack may be made up of many
    components each with their own release cycle and versioning
    scheme.  This version could be used as the umbrella version for
    an entire product/project release.

logging
    Contains configuration values for Bang's logging.

deployer_credentials
    See :meth:`bang.providers.hpcloud.HPCloud.authenticate`

playbooks
    A list of playbook filenames to execute.


Dynamic Stack Resources
~~~~~~~~~~~~~~~~~~~~~~~
These configuration stanzas describe *Infrastructure as a Service
(IaaS)* and *Platform as a Service (PaaS)* resources that should be
created for the stack.

The following top-level section names, or keys, are reserved:

    - queues_
    - buckets_
    - databases_
    - server_security_groups_
    - servers_

Every dynamic stack resource key maps to a *list of definitions* for
that particular resource type.  Each definition in the list is a
key-value map of attributes.  Most attributes are specific to the
type of resource being deployed.  However, every resource definition
must contain a ``provider`` key whose value is the name of a
bang-supported IaaS or PaaS provider.

``queues``
^^^^^^^^^^
E.g. SQS

``buckets``
^^^^^^^^^^^
E.g. S3, OpenStack Swift

``databases``
^^^^^^^^^^^^^
E.g. RDS, OpenStack RedDwarf

``server_security_groups``
^^^^^^^^^^^^^^^^^^^^^^^^^^
E.g. EC2 and OpenStack Nova security groups

..
    ``server_common_attributes``
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    This section does **not** relate directly to a IaaS or PaaS resource.
    Instead, its purpose is to minimize the repetition of common
    attributes in the members of the servers_ section.

    All attributes in this section apply to *all* servers defined in the
    servers_ section.

    Examples of attributes you might include in this section:

        - Centralized logging/monitoring
        - Common security settings/groupings

``servers``
^^^^^^^^^^^
E.g. EC2, OpenStack Nova, VPS virtual machines.

Configuration Scopes
~~~~~~~~~~~~~~~~~~~~
Any top-level section name that is not specified above as a reserved
key in `General Stack Properties`_ or in `Dynamic Stack Resources`_,
is parsed and categorized as a custom configuration scope.

Any configuration scope names that are added to a server's
``config_scopes`` list, make those values available to Ansible
playbooks as vars.
